import axios from "axios";
import setAuthToken from "../utils/setAuthToken";
import jwt_decode from "jwt-decode";

// Login - get user token
export const loginUser = userData => dispatch => {
  axios
    .post("/users/login", userData)
    .then(res => {
      //this.setState({ redirect: true });
      // Save to localStorage
      // Set token to localStorage
      const { token } = res.data;
      localStorage.setItem("jwtToken", token);
      // Set token to Auth header
      setAuthToken(token);
      // Decode token to get user data
      const decoded = jwt_decode(token);

      axios
        .get(`/users/get/${decoded._id}`)
        .then(res => {
          console.log("full user data: ");
          console.log(res.data);

          let userData = res.data;

          // if (res.data.linkedID) {
          //   this.getFriendsNames(res.data.linkedID);
          // }
          // Set current user
          dispatch(setCurrentUser(userData));
        })
        ///loading the friend's names
        // .then(linkedID => {
        //   axios.get(`/users/get/${linkedID}`).then(res => {
        //     this.setState({ friendsNames: res.data.names });
        //   });
        // })
        .catch(err => console.log(err.response.data));
    })
    .catch(
      err => console.log(err)
      // dispatch({
      //   type: "LOGIN_ERROR",
      //   payload: err.response.data
      // })
    );
};

export const setCurrentUser = userData => {
  return {
    type: "SET_CURRENT_USER",
    payload: userData
  };
};

// Get current user
export const getCurrentUser = () => dispatch => {
  dispatch(setUserLoading());
  axios
    .get("/api/user/currentuser")
    .then(res =>
      dispatch({
        type: "GET_CURRENT_USER",
        payload: res.data
      })
    )
    .catch(err =>
      dispatch({
        type: "GET_ERRORS",
        payload: err.response.data
      })
    );
};

//set USER_LOADING
export const setUserLoading = () => {
  return {
    type: "USER_LOADING"
  };
};

// Log user out
export const logoutUser = () => dispatch => {
  // Remove token from local storage
  localStorage.removeItem("jwtToken");
  // Remove auth header for future requests
  setAuthToken(false);
  // Set current user to empty object {} which will set isAuthenticated to false
  dispatch(setCurrentUser({}));
};
